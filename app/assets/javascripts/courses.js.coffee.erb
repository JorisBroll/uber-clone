# Classes
class window.GmapManager
	constructor: (customOptions) ->

		# Set defaults options
		@defaultOptions =
			mapOptions:
				styles: [{"featureType":"landscape","stylers":[{"saturation":-100},{"lightness":60}]},{"featureType":"road.local","stylers":[{"saturation":-100},{"lightness":40},{"visibility":"on"}]},{"featureType":"transit","stylers":[{"saturation":-100},{"visibility":"simplified"}]},{"featureType":"administrative.province","stylers":[{"visibility":"off"}]},{"featureType":"water","stylers":[{"visibility":"on"},{"lightness":30}]},{"featureType":"road.highway","elementType":"geometry.fill","stylers":[{"color":"#ef8c25"},{"lightness":40}]},{"featureType":"road.highway","elementType":"geometry.stroke","stylers":[{"visibility":"off"}]},{"featureType":"poi.park","elementType":"geometry.fill","stylers":[{"color":"#b6c54c"},{"lightness":40},{"saturation":-40}]},{}];
				center: new google.maps.LatLng(45.764128, 4.835262)
				zoom: 12
			rendererOptions: 
				map: 'map-canvas'
				polylineOptions: {strokeColor:'#01b3aa'}
			iconsOptions :
				car:
					url: '<%= image_path("map-car.png") %>'
					size: new google.maps.Size(26, 22)
					origin: new google.maps.Point(0,0)
					anchor: new google.maps.Point(13, 11)

		# Merge options objects to override defaults ones with passed ones
		@options = $.extend(true, {}, @defaultOptions, customOptions);
	
	init: () ->
		@directionsDisplays = []
		@directionsService = new google.maps.DirectionsService();

		# Draw Map
		@map = new google.maps.Map(document.getElementById(@options.rendererOptions.map), @options.mapOptions)

		@markers = []
		@courses = []

		zonesCoords = [
			[
				new google.maps.LatLng(45.774761, 4.811110),
	            new google.maps.LatLng(45.774521, 4.814370),
	            new google.maps.LatLng(45.773979, 4.820680),
	            new google.maps.LatLng(45.773701, 4.823650),
	            new google.maps.LatLng(45.772522, 4.839435),
	            new google.maps.LatLng(45.770039, 4.839177),
	            new google.maps.LatLng(45.766685, 4.839306),
	            new google.maps.LatLng(45.763870, 4.839435),
	            new google.maps.LatLng(45.764351, 4.830930),
	            new google.maps.LatLng(45.765259, 4.830930),
	            new google.maps.LatLng(45.766281, 4.829990),
	            new google.maps.LatLng(45.767052, 4.829020),
	            new google.maps.LatLng(45.767551, 4.828060),
	            new google.maps.LatLng(45.767921, 4.826980),
	            new google.maps.LatLng(45.768131, 4.825930),
	            new google.maps.LatLng(45.768028, 4.823980),
	            new google.maps.LatLng(45.767460, 4.820420),
	            new google.maps.LatLng(45.767220, 4.817460),
	            new google.maps.LatLng(45.768211, 4.814750),
	            new google.maps.LatLng(45.769730, 4.813720),
	            new google.maps.LatLng(45.771469, 4.813290),
	            new google.maps.LatLng(45.774910, 4.809990),
	            new google.maps.LatLng(45.774761, 4.811110)
	        ],
	        [
	        	new google.maps.LatLng(45.763721,4.839430),
	        	new google.maps.LatLng(45.764229,4.830980),
	        	new google.maps.LatLng(45.763271,4.830850),
	        	new google.maps.LatLng(45.761471,4.830460),
	        	new google.maps.LatLng(45.756439,4.825740),
	        	new google.maps.LatLng(45.753601,4.824320),
	        	new google.maps.LatLng(45.751202,4.822220),
	        	new google.maps.LatLng(45.749729,4.819770),
	        	new google.maps.LatLng(45.747639,4.816990),
	        	new google.maps.LatLng(45.745152,4.814580),
	        	new google.maps.LatLng(45.743530,4.813720),
	        	new google.maps.LatLng(45.742222,4.813640),
	        	new google.maps.LatLng(45.740269,4.813250),
	        	new google.maps.LatLng(45.738682,4.813380),
	        	new google.maps.LatLng(45.735149,4.814150),
	        	new google.maps.LatLng(45.732391,4.814840),
	        	new google.maps.LatLng(45.730740,4.817070),
	        	new google.maps.LatLng(45.726837,4.818449),
	        	new google.maps.LatLng(45.726883,4.819093),
	        	new google.maps.LatLng(45.734131,4.820200),
	        	new google.maps.LatLng(45.735840,4.820800),
	        	new google.maps.LatLng(45.748539,4.831710),
	        	new google.maps.LatLng(45.757011,4.837970),
	        	new google.maps.LatLng(45.761349,4.839170),
	        	new google.maps.LatLng(45.763721,4.839430)
	        ],
	        [
	        	new google.maps.LatLng(45.763630,4.839900),
	        	new google.maps.LatLng(45.763783,4.868832),
	        	new google.maps.LatLng(45.762283,4.868542),
	        	new google.maps.LatLng(45.762688,4.872308),
	        	new google.maps.LatLng(45.761806,4.872394),
	        	new google.maps.LatLng(45.762009,4.873971),
	        	new google.maps.LatLng(45.759678,4.875698),
	        	new google.maps.LatLng(45.758423,4.876556),
	        	new google.maps.LatLng(45.754917,4.876084),
	        	new google.maps.LatLng(45.754978,4.878144),
	        	new google.maps.LatLng(45.754620,4.881020),
	        	new google.maps.LatLng(45.754261,4.884281),
	        	new google.maps.LatLng(45.754269,4.885665),
	        	new google.maps.LatLng(45.754269,4.887575),
	        	new google.maps.LatLng(45.754082,4.891437),
	        	new google.maps.LatLng(45.753937,4.893926),
	        	new google.maps.LatLng(45.753391,4.896727),
	        	new google.maps.LatLng(45.752926,4.898400),
	        	new google.maps.LatLng(45.751774,4.897842),
	        	new google.maps.LatLng(45.750366,4.897338),
	        	new google.maps.LatLng(45.747311,4.896684),
	        	new google.maps.LatLng(45.739059,4.892199),
	        	new google.maps.LatLng(45.741959,4.883401),
	        	new google.maps.LatLng(45.742504,4.880065),
	        	new google.maps.LatLng(45.743149,4.878391),
	        	new google.maps.LatLng(45.744431,4.874539),
	        	new google.maps.LatLng(45.745628,4.871100),
	        	new google.maps.LatLng(45.746655,4.868113),
	        	new google.maps.LatLng(45.747814,4.864744),
	        	new google.maps.LatLng(45.756706,4.838694),
	        	new google.maps.LatLng(45.760929,4.839770),
	        	new google.maps.LatLng(45.763630,4.839900)
	        ],
	        [
	        	new google.maps.LatLng(45.789703,4.818964),
	        	new google.maps.LatLng(45.784313,4.821239),
	        	new google.maps.LatLng(45.784256,4.823813),
	        	new google.maps.LatLng(45.782848,4.829607),
	        	new google.maps.LatLng(45.784077,4.831152),
	        	new google.maps.LatLng(45.783478,4.832869),
	        	new google.maps.LatLng(45.781830,4.832611),
	        	new google.maps.LatLng(45.782040,4.835229),
	        	new google.maps.LatLng(45.782818,4.837074),
	        	new google.maps.LatLng(45.782730,4.838276),
	        	new google.maps.LatLng(45.779045,4.841495),
	        	new google.maps.LatLng(45.778687,4.842610),
	        	new google.maps.LatLng(45.772732,4.839349),
	        	new google.maps.LatLng(45.775368,4.809523),
	        	new google.maps.LatLng(45.778271,4.809351),
	        	new google.maps.LatLng(45.789703,4.818964)
	        ],
	        [
	        	new google.maps.LatLng(45.760540,4.829560),
	        	new google.maps.LatLng(45.756920,4.825950),
	        	new google.maps.LatLng(45.753811,4.824110),
	        	new google.maps.LatLng(45.751381,4.822050),
	        	new google.maps.LatLng(45.748829,4.817630),
	        	new google.maps.LatLng(45.744732,4.813600),
	        	new google.maps.LatLng(45.746979,4.799950),
	        	new google.maps.LatLng(45.750839,4.786040),
	        	new google.maps.LatLng(45.756859,4.782010),
	        	new google.maps.LatLng(45.761177,4.782829),
	        	new google.maps.LatLng(45.762878,4.784410),
	        	new google.maps.LatLng(45.765720,4.787330),
	        	new google.maps.LatLng(45.766800,4.791790),
	        	new google.maps.LatLng(45.765900,4.798960),
	        	new google.maps.LatLng(45.762039,4.803510),
	        	new google.maps.LatLng(45.769161,4.811620),
	        	new google.maps.LatLng(45.770538,4.813120),
	        	new google.maps.LatLng(45.767971,4.814240),
	        	new google.maps.LatLng(45.767010,4.816990),
	        	new google.maps.LatLng(45.767159,4.819470),
	        	new google.maps.LatLng(45.767941,4.824200),
	        	new google.maps.LatLng(45.767910,4.825740),
	        	new google.maps.LatLng(45.767609,4.827460),
	        	new google.maps.LatLng(45.766560,4.829260),
	        	new google.maps.LatLng(45.765362,4.830120),
	        	new google.maps.LatLng(45.764198,4.830420),
	        	new google.maps.LatLng(45.763210,4.830250),
	        	new google.maps.LatLng(45.761742,4.830120),
	        	new google.maps.LatLng(45.760540,4.829560)
	        ],
	        [
	        	new google.maps.LatLng(45.763721,4.839820),
	        	new google.maps.LatLng(45.768661,4.839690),
	        	new google.maps.LatLng(45.772549,4.839900),
	        	new google.maps.LatLng(45.780602,4.844280),
	        	new google.maps.LatLng(45.784039,4.847580),
	        	new google.maps.LatLng(45.786171,4.852000),
	        	new google.maps.LatLng(45.786819,4.856340),
	        	new google.maps.LatLng(45.786671,4.860330),
	        	new google.maps.LatLng(45.779610,4.859770),
	        	new google.maps.LatLng(45.772881,4.858830),
	        	new google.maps.LatLng(45.770180,4.859510),
	        	new google.maps.LatLng(45.771027,4.868896),
	        	new google.maps.LatLng(45.763870,4.868810),
	        	new google.maps.LatLng(45.763721,4.839820)
	        ],
	        [
	        	new google.maps.LatLng(45.756680,4.838670),
	        	new google.maps.LatLng(45.749493,4.859637),
	        	new google.maps.LatLng(45.742496,4.857867),
	        	new google.maps.LatLng(45.740723,4.856236),
	        	new google.maps.LatLng(45.740177,4.855281),
	        	new google.maps.LatLng(45.739243,4.851848),
	        	new google.maps.LatLng(45.737869,4.849144),
	        	new google.maps.LatLng(45.737007,4.848892),
	        	new google.maps.LatLng(45.734970,4.849477),
	        	new google.maps.LatLng(45.731220,4.848908),
	        	new google.maps.LatLng(45.728119,4.847782),
	        	new google.maps.LatLng(45.726299,4.847850),
	        	new google.maps.LatLng(45.719120,4.848940),
	        	new google.maps.LatLng(45.716621,4.850560),
	        	new google.maps.LatLng(45.715870,4.843210),
	        	new google.maps.LatLng(45.708988,4.843340),
	        	new google.maps.LatLng(45.711342,4.833290),
	        	new google.maps.LatLng(45.712318,4.828960),
	        	new google.maps.LatLng(45.713699,4.826040),
	        	new google.maps.LatLng(45.715481,4.824450),
	        	new google.maps.LatLng(45.716961,4.823720),
	        	new google.maps.LatLng(45.720589,4.821580),
	        	new google.maps.LatLng(45.728298,4.819540),
	        	new google.maps.LatLng(45.733379,4.820590),
	        	new google.maps.LatLng(45.735722,4.821190),
	        	new google.maps.LatLng(45.737240,4.822690),
	        	new google.maps.LatLng(45.747971,4.832090),
	        	new google.maps.LatLng(45.756680,4.838670)
	        ],
	        [
	        	new google.maps.LatLng(45.749489,4.859680),
	        	new google.maps.LatLng(45.742550,4.879620),
	        	new google.maps.LatLng(45.742222,4.881270),
	        	new google.maps.LatLng(45.741890,4.883290),
	        	new google.maps.LatLng(45.738941,4.892040),
	        	new google.maps.LatLng(45.735088,4.889770),
	        	new google.maps.LatLng(45.729259,4.886640),
	        	new google.maps.LatLng(45.722420,4.887370),
	        	new google.maps.LatLng(45.721771,4.885800),
	        	new google.maps.LatLng(45.721470,4.881996),
	        	new google.maps.LatLng(45.724419,4.871470),
	        	new google.maps.LatLng(45.726818,4.862437),
	        	new google.maps.LatLng(45.728859,4.860960),
	        	new google.maps.LatLng(45.730721,4.859750),
	        	new google.maps.LatLng(45.729641,4.853550),
	        	new google.maps.LatLng(45.716980,4.854560),
	        	new google.maps.LatLng(45.716621,4.850560),
	        	new google.maps.LatLng(45.719120,4.848940),
	        	new google.maps.LatLng(45.726299,4.847850),
	        	new google.maps.LatLng(45.728119,4.847782),
	        	new google.maps.LatLng(45.731220,4.848908),
	        	new google.maps.LatLng(45.734970,4.849477),
	        	new google.maps.LatLng(45.737007,4.848892),
	        	new google.maps.LatLng(45.737869,4.849144),
	        	new google.maps.LatLng(45.738289,4.849960),
	        	new google.maps.LatLng(45.739243,4.851848),
	        	new google.maps.LatLng(45.740101,4.855290),
	        	new google.maps.LatLng(45.740662,4.856250),
	        	new google.maps.LatLng(45.742458,4.857910),
	        	new google.maps.LatLng(45.749489,4.859680)
	        ],
	        [
	        	new google.maps.LatLng(45.763451,4.804970),
	        	new google.maps.LatLng(45.772789,4.791060),
	        	new google.maps.LatLng(45.789070,4.806340),
	        	new google.maps.LatLng(45.792900,4.820760),
	        	new google.maps.LatLng(45.778358,4.809008),
	        	new google.maps.LatLng(45.776474,4.808836),
	        	new google.maps.LatLng(45.775368,4.809051),
	        	new google.maps.LatLng(45.774258,4.809995),
	        	new google.maps.LatLng(45.772343,4.812055),
	        	new google.maps.LatLng(45.770607,4.813128),
	        	new google.maps.LatLng(45.763451,4.804970)
	        ]
		]

		zonesColors = [
			'#FF0000', '#FF6633','#FFFF33','#0000FF','#0099FF','#00CC33','#66FFFF','#FF99FF','#CC6666'
		]

		@zones = []
		for coords, i in zonesCoords
			newZone = new google.maps.Polygon({
			    paths: coords,
			    strokeWeight: 0;
			    fillColor: zonesColors[i],
			    fillOpacity: 0.3
			})
			#for point, j in coords
			#	marker = new google.maps.Marker({
			#		position: point,
			#		map: @map,
			#		title:j+' - '+point.lat()+' / '+point.lng()
			#	});
			@zones.push(newZone)
			newZone.setMap(@map)

		@options.rendererOptions.map = @map

	resize: ()->
		google.maps.event.trigger(@map, 'resize')

	computeCourse: (list, customOptions, callback_print) ->
		defaultOptions =
			distanceCap: false
			index: 0

		@options.computeOptions = $.extend(true, {}, defaultOptions, customOptions);

		if callback_print
			@callback_print = callback_print
		

		for directionDisplay in @directionsDisplays
			directionDisplay.setDirections({routes: []});

		if list.length
			@totalRequests = list.length
			for course, i in list
				request = @makeRequest(course.start, course.end)
				((i) =>
					@directionsService.route(request, (response, status) =>
						@printRoutes(response, status, i)
					)
				)(i)
			
		else
			@totalRequests = 1
			request = @makeRequest(list.start.val(), list.end.val())
			@directionsService.route(request, (response, status) =>
				@printRoutes(response, status, 0)
				list.start.val(response.routes[0].legs[0].start_address)
				list.end.val(response.routes[0].legs[0].end_address)
			)
			

	makeRequest: (from, to) ->
		return request =
			origin: from
			destination: to
			travelMode: google.maps.TravelMode.DRIVING


	printRoutes: (response, status, i) =>
		console.log response

		if status == google.maps.DirectionsStatus.OK
			route = response.routes[0].legs[0]
			
			@directionsDisplays[i] = new google.maps.DirectionsRenderer(@options.rendererOptions)
			@directionsDisplays[i].setDirections(response);
				
			#console.log @directionsDisplays

			if !@options.computeOptions.distanceCap
				@callback_print(
					status: 'OK'
					route: route
				)
			else
				@callback_print(@distanceCheck(route))
		else
			@callback_print(
				status: 'KO'
				message: "Erreur : trajet impossible à générer, une ou les adresses n'ont pas pû être interpretées."
			)

	distanceCheck: (route) ->
		_start_type = @getType_point(route.start_location, route.start_address)
		_end_type = @getType_point(route.end_location, route.end_address)

		start_type = _start_type[0]
		end_type = _end_type[0]

		#console.log start_type
		#console.log end_type

		if start_type == 'airport' && end_type == 'airport'
			return result = 
				status: 'KO'
				message: "Trajet non valide."

		else if (start_type == 'airport' && end_type == 'indoors') || (start_type == 'indoors' && end_type == 'airport')
			prices = [50, 45, 45, 50 ,50, 45, 45, 45, 55]
			if _start_type[1] != false
				zone = _start_type[1]
			else if _end_type[1] != false
				zone = _end_type[1]
			else
				zone = false

			#console.log "Arrondissement : "+(zone+1)

			return result = 
				status: 'OK'
				route:
					duration: route.duration
					distance: route.distance
					timePrice: 'FORFAIT'
					kmPrice: 'FORFAIT'
					totalPrice: prices[zone]



		else if (start_type == 'airport' && end_type == 'outdoors') || (start_type == 'outdoors' && end_type == 'airport') || (start_type == 'indoors' && end_type == 'indoors')
			timePrice = 0.3
			kmPrice = 2.5

			if route.distance.value > 10000
				add_kmPrice = 1.5
				totalPrice = Math.round( (timePrice*(route.duration.value/60) + kmPrice*10 + add_kmPrice*(route.distance.value-10000)/1000)*100) /100
			else
				totalPrice = Math.round( ( timePrice*(route.duration.value/60) + kmPrice*(route.distance.value/1000) )*100)/100

			return result = 
				status: 'OK'
				route:
					duration: route.duration
					distance: route.distance
					timePrice: timePrice
					kmPrice: kmPrice
					totalPrice: totalPrice

		else if (start_type == 'indoors' && end_type == 'outdoors') || (start_type == 'outdoors' && end_type == 'indoors')
			timePrice = 0.3
			kmPrice = 2.5

			if route.distance.value > 10000
				add_kmPrice = 1.5
				totalPrice = Math.round( (timePrice*(route.duration.value/60) + kmPrice*10 + add_kmPrice*(route.distance.value-10000)/1000)*100) /100
			else
				totalPrice = Math.round( ( timePrice*(route.duration.value/60) + kmPrice*(route.distance.value/1000) )*100)/100

			return result = 
				status: 'OK'
				route:
					duration: route.duration
					distance: route.distance
					timePrice: timePrice
					kmPrice: kmPrice
					totalPrice: totalPrice

		else if (start_type == 'outdoors' && end_type == 'outdoors')
			if route.distance.value < 10000
				return result = 
					status: 'KO'
					message: "Il faut que le trajet soit d'au moins 10Km (actuellement "+route.distance.value/1000+")" 
			else
				e = (Math.PI*route.start_location.lat()/180)
				f = (Math.PI*route.start_location.lng()/180)
				g = (Math.PI*45.757609/180)
				h = (Math.PI*4.832043/180)
				i = (Math.cos(e)*Math.cos(g)*Math.cos(f)*Math.cos(h)+Math.cos(e)*Math.sin(f)*Math.cos(g)*Math.sin(h)+Math.sin(e)*Math.sin(g));
				j = (Math.acos(i))
				k = Math.round((6371*j)*Math.pow(10,3))/Math.pow(10,3);


				if k > 20
					return result = 
					status: 'KO'
					message: "Il faut que le départ du trajet soit à moins de 20Km de Lyon (actuellement "+k+")" 

				else
					timePrice = 0.3
					kmPrice = 2.5

					if route.distance.value > 10000
						add_kmPrice = 1.5
						totalPrice = Math.round( (timePrice*(route.duration.value/60) + kmPrice*10 + add_kmPrice*(route.distance.value-10000)/1000)*100) /100
					else
						totalPrice = Math.round( ( timePrice*(route.duration.value/60) + kmPrice*(route.distance.value/1000) )*100)/100

					return result = 
						status: 'OK'
						route:
							duration: route.duration
							distance: route.distance
							timePrice: timePrice
							kmPrice: kmPrice
							totalPrice: totalPrice


			
		

	getType_point: (point, address) ->
		type = 'outdoors'
		start_inLyon = false;
		if address == "Aéroport de Lyon-Saint Exupéry (LYS), 69125 Colombier-Saugnieu, France" || address == 'Lyon-St Exupery(TGV), Aéroport de Lyon-Saint Exupéry (LYS), 69125 Colombier-Saugnieu, France'
			type = 'airport'
		else
			for zone, i in @zones
				if google.maps.geometry.poly.containsLocation(point, zone)
					start_inLyon = i

			if start_inLyon != false
				type = 'indoors'
			else
				type = 'outdoors'

		return [type, start_inLyon]
	

	printMarker: (options, icon, title, infoWindowContents) ->
		markerOptions =
			map: @map
			icon: @options.iconsOptions[icon]
			position: new google.maps.LatLng(options[0], options[1])
			title: title

		marker = new google.maps.Marker(markerOptions);
		@markers.push(marker)

		infowindow = new google.maps.InfoWindow(
			content: infoWindowContents
		)
		google.maps.event.addListener(marker, 'mouseover', ()->
		    infowindow.open(@map,marker);
		)
		google.maps.event.addListener(marker, 'mouseout', ()->
			setTimeout(()=>
				infowindow.close()
			, 500);
		)
		


$(".static_pages.map").ready ->
	class getterStatus
		@div = $('#select-status-display')
		@status_counter =
			ok: 0
			ko:0
			total:0
		@listLength = 0

		@print: (results) ->
			console.log results
			if results == "NOT_FOUND"
				$('#status-notfound').text('Aucune course trouvée').show();
				$('#status-ok-counter').hide();
				$('#status-ko-counter').hide();
			else
				getterStatus.status_counter.total++

				switch results.status
					when "OK" then getterStatus.status_counter.ok++
					when "KO" then getterStatus.status_counter.ko++
				
				# If loop complete
				if getterStatus.status_counter.total == getterStatus.listLength

					$('#status-notfound').hide();
					$('#status-ok-counter').text(getterStatus.status_counter.ok+' courses trouvées').show();
					if(getterStatus.status_counter.ko > 0)
						$('#status-ko-counter').text(getterStatus.status_counter.ko+' avec erreur').show();
					else
						$('#status-ko-counter').hide();

	class pointsManager
		@init: (map) ->
			@map = map

		@infosbulles = []

		@buildOptions: (form) ->
			rData = {}
			form.find('input[type="text"], input[type="hidden"], input[type="password"], select, textarea').each(()->
				rData[$(this).attr('id')] = $(this).val()
			)
			form.find('input[type=radio]:checked').each(()->
				rData[$(this).attr('name')] = $(this).val()
			)
			return rData;

		@get: (customOptions) ->
			defaultOptions = {}

			options = $.extend(true, {}, defaultOptions, customOptions);

			$.ajax({
	            url: '/ajax/map_get',
	            type: "GET",
	            dataType: "json",
	            data: options
	        }).done((response) =>
	        	#console.log response
	        	pointsManager.print(response)
	        )
		
		@print: (list) ->
			for infosbulle in @infosbulles
				infosbulle.close();

			console.log(@map)
			for marker in @map.markers
				marker.setMap(null);
			
			if list.courses && list.courses.length > 0
				startEndsList = []
				for course, i in list.courses
					startEndsList[i] = 
						start: course.from;
						end: course.to;

				getterStatus.listLength = list.courses.length

				getterStatus.status_counter.ok = 0
				getterStatus.status_counter.ko = 0
				getterStatus.status_counter.total = 0

				@map.computeCourse(startEndsList, {}, getterStatus.print)

			else getterStatus.print("NOT_FOUND")

			if list.users && list.users.length > 0
				for user in list.users
					message = $('<div/>', {"class":'scrollFix'}).append($('<p/>', {text:user.name+' '+user.last_name})).append($('<p/>', {text: 'Tel : '+user.phone+' / Port : '+user.cellphone}))
					
					if user.partner != null
						message.append($('<p/>', {text: user.partner.name}))

					position = [user.pos_lat, user.pos_lon]
					@map.printMarker(position, 'car', user.name+' '+user.last_name, message.prop('outerHTML'))

	$(window).on 'gmap-loaded', ->
		options =
			rendererOptions :
				polylineOptions: {strokeColor:'#01b3aa', strokeOpacity: 0.6}
				markerOptions:
					icon:
						url: '<%= image_path("map-marker.png") %>'
						size: new google.maps.Size(30, 25)
						origin: new google.maps.Point(0,0)
						anchor: new google.maps.Point(9, 25)

					
		map = new GmapManager(options)
		map.init()
		pointsManager.init(map)
		pointsManager.get(pointsManager.buildOptions($('#map-filters')))

	$('#map-filters #get').on 'click', ->
		filterOptions = pointsManager.buildOptions($('#map-filters'));
		pointsManager.get(filterOptions)